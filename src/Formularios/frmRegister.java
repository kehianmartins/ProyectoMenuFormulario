/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;

import Clases.ConexionDB;
import Clases.Contrasena;
import Clases.Encriptacion;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 * @author kehian
 * 
 * Clase de formulario de Registro de usuarios. Permite
 * realizar todas las acciones CRUD (Crear, Leer, Actualizar y
 * Borrar) sobre un usuario. 
 */
public class frmRegister extends javax.swing.JFrame {
    
    // --> Constantes
    
    /**
     * Constante de Foreground inicial: GRIS.
     */
    private final Color COLOR_INIT = new java.awt.Color(102, 102, 102);
    /**
     * Constante de Foreground de error: ROJO.
     */
    private final Color COLOR_ERR = new java.awt.Color(204, 0, 0);
    /**
     * Constante de Foreground por defecto: NEGRO.
     */
    private final Color COLOR_DEF = new java.awt.Color(0, 0, 0);

    /**
     * Icono de error utilizado en los JOptionPane.
     */
    private final ImageIcon ICONO_ERROR = new ImageIcon(getClass().getResource("/Imagenes/iconIncorrecto.png"));

    /**
     * Instancia de Encriptación para manejar el cifrado de contraseñas.
     */
    private final transient Encriptacion encriptar = new Encriptacion();

    /**
     * Instancia de Contraseña para validar la entrada de contraseñas.
     */
    private final transient Contrasena contrasena = new Contrasena();

    // --> Variables de instancia
    
    /**
     * Conexión a la base de datos.
     */
    private transient Connection conexion = ConexionDB.getConnection();

    /**
     * Modelo de la tabla.
     */
    private DefaultTableModel modeloTabla;

    /**
     * Filtro para búsqueda en la tabla.
     */
    private transient TableRowSorter trs;

    /**
     * Variable para no resetear la contraseña cuando se pierde el foco por
     * botón.
     */
    private boolean focoPerdidoPorBoton = false;

     
    
    /**
     * CONSTRUCTOR
     */
    public frmRegister() {
        initComponents();
        setLocationRelativeTo(null);

        // Configuración inicial
        configTabla();
        cargarUsuarios();
        bgPanel.requestFocusInWindow();

        // Inicializar visibilidad de etiquetas de error
        lblBadFullName.setVisible(false);
        lblBadUsername.setVisible(false);
        lblBadPwd.setVisible(false);

        // Deshabilitar botones inicialmente
        togglebtnShowPwd.setEnabled(false);
        btnAgregar.setEnabled(false);
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        bgPanel = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblFullName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblUserType = new javax.swing.JLabel();
        cmbUserType = new javax.swing.JComboBox<>();
        pwdPassword = new javax.swing.JPasswordField();
        lblBadPwd = new javax.swing.JLabel();
        lblBadFullName = new javax.swing.JLabel();
        lblBadUsername = new javax.swing.JLabel();
        lblDigitsPwd = new javax.swing.JLabel();
        togglebtnShowPwd = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtUsuario = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblConexión = new javax.swing.JLabel();
        lblConexiónEstado = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        bgPanel.setBackground(new java.awt.Color(255, 255, 255));
        bgPanel.setPreferredSize(new java.awt.Dimension(439, 450));
        bgPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bgPanelMouseClicked(evt);
            }
        });

        lblTitulo.setBackground(new java.awt.Color(0, 102, 102));
        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Formulario de Registro");
        lblTitulo.setOpaque(true);

        lblFullName.setBackground(new java.awt.Color(255, 255, 255));
        lblFullName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblFullName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblFullName.setText("Nombre y Apellido");
        lblFullName.setPreferredSize(new java.awt.Dimension(125, 20));

        txtFullName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtFullName.setForeground(new java.awt.Color(102, 102, 102));
        txtFullName.setText("Ingrese un nombre y apellido");
        txtFullName.setNextFocusableComponent(txtUsername);
        txtFullName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFullNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFullNameFocusLost(evt);
            }
        });

        lblUsername.setBackground(new java.awt.Color(255, 255, 255));
        lblUsername.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblUsername.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUsername.setText("Nombre de Usuario");
        lblUsername.setPreferredSize(new java.awt.Dimension(130, 20));

        txtUsername.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(102, 102, 102));
        txtUsername.setText("Ingrese un nombre de usuario");
        txtUsername.setNextFocusableComponent(pwdPassword);
        txtUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUsernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUsernameFocusLost(evt);
            }
        });

        lblPassword.setBackground(new java.awt.Color(255, 255, 255));
        lblPassword.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPassword.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPassword.setText("Contraseña");
        lblPassword.setPreferredSize(new java.awt.Dimension(125, 20));

        lblUserType.setBackground(new java.awt.Color(255, 255, 255));
        lblUserType.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblUserType.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUserType.setText("Tipo de Usuario");
        lblUserType.setPreferredSize(new java.awt.Dimension(106, 20));

        cmbUserType.setForeground(new java.awt.Color(102, 102, 102));
        cmbUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar", "A", "B" }));
        cmbUserType.setToolTipText("A: Admin, B: Básico");
        cmbUserType.setNextFocusableComponent(btnAgregar);
        cmbUserType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbUserTypeItemStateChanged(evt);
            }
        });

        pwdPassword.setForeground(new java.awt.Color(153, 153, 153));
        pwdPassword.setText("******************");
        pwdPassword.setEchoChar('●');
        pwdPassword.setNextFocusableComponent(cmbUserType);
        pwdPassword.setPreferredSize(new java.awt.Dimension(105, 26));
        pwdPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pwdPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pwdPasswordFocusLost(evt);
            }
        });
        pwdPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pwdPasswordKeyReleased(evt);
            }
        });

        lblBadPwd.setForeground(new java.awt.Color(204, 0, 0));
        lblBadPwd.setText("Contraseña no valida, intente con una diferente");
        lblBadPwd.setPreferredSize(new java.awt.Dimension(250, 10));

        lblBadFullName.setForeground(new java.awt.Color(204, 0, 0));
        lblBadFullName.setText("Nombre y apellido no validos, intente con unos diferentes");
        lblBadFullName.setPreferredSize(new java.awt.Dimension(250, 10));

        lblBadUsername.setForeground(new java.awt.Color(204, 0, 0));
        lblBadUsername.setText("Nombre de usuario no valido, intente con uno diferente");
        lblBadUsername.setPreferredSize(new java.awt.Dimension(250, 10));

        lblDigitsPwd.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDigitsPwd.setText("0");

        togglebtnShowPwd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/pwd-hidden.png"))); // NOI18N
        togglebtnShowPwd.setBorder(null);
        togglebtnShowPwd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                togglebtnShowPwdMousePressed(evt);
            }
        });
        togglebtnShowPwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggletogglebtnShowPwdActionPerformed(evt);
            }
        });

        jtUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtUsuario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtUsuarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtUsuario);

        btnAgregar.setBackground(new java.awt.Color(0, 102, 102));
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setText("Agregar");
        btnAgregar.setContentAreaFilled(false);
        btnAgregar.setOpaque(true);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(0, 102, 102));
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("Editar");
        btnEditar.setContentAreaFilled(false);
        btnEditar.setOpaque(true);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 102, 102));
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setContentAreaFilled(false);
        btnEliminar.setOpaque(true);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtBuscar.setFont(txtFullName.getFont());
        txtBuscar.setForeground(new java.awt.Color(102, 102, 102));
        txtBuscar.setText("Ingrese su búsqueda.");
        txtBuscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBuscarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBuscarFocusLost(evt);
            }
        });
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarKeyTyped(evt);
            }
        });

        jLabel2.setText("Buscar");

        jLabel3.setText("caracteres");

        lblConexión.setFont(new java.awt.Font("Cantarell", 1, 13)); // NOI18N
        lblConexión.setText("Conexión:");
        lblConexión.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        lblConexiónEstado.setFont(new java.awt.Font("Cantarell", 1, 13)); // NOI18N
        lblConexiónEstado.setForeground(new java.awt.Color(204, 0, 0));
        lblConexiónEstado.setText("Apagada");
        lblConexiónEstado.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout bgPanelLayout = new javax.swing.GroupLayout(bgPanel);
        bgPanel.setLayout(bgPanelLayout);
        bgPanelLayout.setHorizontalGroup(
            bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmbUserType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblBadUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(bgPanelLayout.createSequentialGroup()
                                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(96, 96, 96))
                            .addComponent(lblBadFullName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFullName)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgPanelLayout.createSequentialGroup()
                                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblUserType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblBadPwd, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, bgPanelLayout.createSequentialGroup()
                                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(bgPanelLayout.createSequentialGroup()
                                                .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblDigitsPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3))
                                            .addComponent(pwdPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(togglebtnShowPwd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(12, 12, 12)))
                        .addGap(12, 12, 12)
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(bgPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBuscar))))
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblConexión)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblConexiónEstado)))
                .addContainerGap())
            .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        bgPanelLayout.setVerticalGroup(
            bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConexión)
                    .addComponent(lblConexiónEstado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgPanelLayout.createSequentialGroup()
                        .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBadFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBadUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDigitsPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(togglebtnShowPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pwdPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBadPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                        .addComponent(lblUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 38, Short.MAX_VALUE)
                        .addGroup(bgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                            .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 898, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
     * EVENTOS 
     */
    
    private void bgPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bgPanelMouseClicked
        bgPanel.requestFocus();
        jtUsuario.clearSelection();
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }//GEN-LAST:event_bgPanelMouseClicked

    /**
     * Visualizar/Ocultar contraseña. Al presionar el botón, cambia su estado de
     * seleccionado a no seleccionado. Utiliza logotipos para mejorar la estética
     * de la GUI.
     * <p>
     * El método ".setEchoChar" establece el caracter de visualización del texto;
     * si se establece "0", se establece el predeterminado, es decir, la visualización
     * normal de cada caracter.</p>
     * 
     * <p>
     * Se solicita el focus al JPasswordField para que el usuario no tenga que volver
     * a entrar al campo luego de cambiar la visibilidad de la contraseña.</p>
     * 
     * @param evt Evento predeterminado de boton, evalúa su cambio de estado.
     */
    private void toggletogglebtnShowPwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggletogglebtnShowPwdActionPerformed
        
        if(togglebtnShowPwd.isSelected()) {
            pwdPassword.setEchoChar((char)0);
            togglebtnShowPwd.setIcon(new ImageIcon(getClass().getResource("/Imagenes/pwd-show.png")));
        } else {
            pwdPassword.setEchoChar('●');
            togglebtnShowPwd.setIcon(new ImageIcon(getClass().getResource("/Imagenes/pwd-hidden.png")));
        }
        
        focoPerdidoPorBoton = true;
        pwdPassword.requestFocus();
    }//GEN-LAST:event_toggletogglebtnShowPwdActionPerformed

    /**
     * Liberación de una tecla en el campo de contraseña. En general, este evento 
     * tiene el propósito de realizar el conteo de caracteres en tiempo real del campo.
     * 
     * <p>
     * Este método verifica si la contraseña ingresada en el campo es valida.
     * En caso de que no lo sea <i>(si no está entre 8 y 18 caracteres)</i>, se 
     * muestra un mensaje de error. Si el campo de contraseña está vacio, no
     * se mostrará advertencia al usuario. El método utilizado (verificarLargo) 
     * de la clase Contrasena, es negad oporque se requiere saber si NO es valido,
     * no si lo es.</p>
     * 
     * @see Clases.Contrasena#verificarLargo(char[])
     * @param evt El evento de la tecla que se liberó.
     */
    private void pwdPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pwdPasswordKeyReleased
        
        char[] pass = pwdPassword.getPassword();
        lblDigitsPwd.setText(pass.length + "");
        
        if(!contrasena.verificarLargo(pass) && !(pass.length == 0)) {
            lblBadPwd.setText("Su contraseña debe tener estar entre 8-18 caracteres");
            lblBadPwd.setVisible(true);
        } else {
            lblBadPwd.setVisible(false);
            pwdPassword.setForeground(COLOR_DEF);
        }
        
        Arrays.fill(pass, '\0');
        pass = null;
    }//GEN-LAST:event_pwdPasswordKeyReleased

    /**
     * Verificación de la validez de los caracteres en la contraseña. Este método 
     * verifica si la contraseña es igual a la predeterminada o si contiene caracteres 
     * ilegales (espacios en blanco), en cualquiera de estos casos, se muestra un
     * mensaje de error al usuario.
     * 
     * <p>
     * Si el largo de la contraseña es 0, es decir, el campo está vacio y la pérdida 
     * del foco no fue a causa del botón, se restablece la contraseña por defecto y 
     * la vista de caracteres por defecto.</p>
     * 
     * <p>
     * <b>Aclaración:</b> El método Arrays.fill(array, caracter), llena el array con 
     * el caracter específicado, en este caso, se sobrescribe el array con un caracter nulo <b>('\0')</b>.
     * Y se elimina cualquier referencia al array con "pass = null"; para que así pueda ser elegido como
     * recolección por parte del Garbage Collector, y se libere ese espacio de memoria, logrando que la 
     * contraseña sea casi imposible de obtener mediante el acceso directo su ubicación en memoria. Y que
     * cualquier referencia a el array devuelva un valor nulo, y por tanto, un NullPointerException.</p>
     * 
     * @param evt El evento del foco perdido.
     */
    private void pwdPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pwdPasswordFocusLost
        
        char[] pass = pwdPassword.getPassword();

        if (contrasena.verificarContDef(pass)) {
            pwdPassword.setForeground(COLOR_ERR);
            lblBadPwd.setText("Contraseña no valida, intente con una diferente");
            lblBadPwd.setVisible(true);

        } else if (contrasena.contieneVacio(pass)) {
            pwdPassword.setForeground(COLOR_ERR);
            lblBadPwd.setText("La contraseña no puede contener espacios");
            lblBadPwd.setVisible(true);
        }

        verificarComponentes();

        if (pass.length == 0 && !focoPerdidoPorBoton) {
            pwdPassword.setEchoChar('●');
            pwdPassword.setText("******************");
            pwdPassword.setForeground(COLOR_INIT);
            togglebtnShowPwd.setEnabled(false);
            lblBadPwd.setVisible(false);
        }

        focoPerdidoPorBoton = false;
        Arrays.fill(pass, '\0');
        pass = null;
    }//GEN-LAST:event_pwdPasswordFocusLost

    /**
     * Preparación del Campo de Contraseña. Este método en general, realiza la 
     * prearación del campo de JPasswordField para el ingreso de la contraseña. 
     * Vacia el campo si lo ingresado es igual al texto predeterminado. 
     * 
     * @param evt Evento de obtención del foco.
     */
    private void pwdPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pwdPasswordFocusGained
        
        char[] pass = pwdPassword.getPassword();
        
        if (contrasena.verificarContDef(pass)) {
            pwdPassword.setText("");
            pwdPassword.setForeground(COLOR_DEF);
            togglebtnShowPwd.setEnabled(true);
        }
        
        togglebtnShowPwd.setEnabled(true);
        pwdPassword.setForeground(COLOR_DEF);
        
        focoPerdidoPorBoton = false;
        Arrays.fill(pass, '\0');
        pass = null;
    }//GEN-LAST:event_pwdPasswordFocusGained

    /**
     * Verificar Campo de Texto. Este método realiza la verificación de la validez 
     * del contenido del campo de texto mediante el método común "verificarTextField".
     * <p>
     * Como agregado, verifica que no contenga espacios en blanco no permitidos en 
     * el Nombre de Usuario.</p>
     * 
     * @see Formularios.frmRegister#verificarTextField(javax.swing.JTextField, javax.swing.JLabel, java.lang.String, java.lang.String, java.lang.String, java.lang.String) 
     * @param evt Evento de perdida del foco.
     */
    private void txtUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusLost
        String username = txtUsername.getText();
        verificarComponentes();
        
        verificarTextField(txtUsername, 
                lblBadUsername, 
                username, 
                "Nombre de Usuario", 
                "^[a-zA-Z0-9_]+$", 
                "Solamente utilice letras (a-z), numeros (0-9) y guiones bajos (_)");
        
        if (username.contains(" ")) {
            lblBadUsername.setText("El nombre de usuario no puede contener espacios");
        }
    }//GEN-LAST:event_txtUsernameFocusLost
    
    /**
     * Preparación del Campo de Texto. Es un método que prepara el campo de 
     * texto para el ingreso de contenido. Si el campo tiene el texto por 
     * defecto, este vacia el campo para el nuevo ingreso y establece el 
     * Foreground correspondiente.
     * 
     * @param evt Evento de obtención del foco.
     */
    private void txtUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUsernameFocusGained
        
        if (txtUsername.getText().equals("Ingrese un nombre de usuario")) {
            txtUsername.setText("");
        }
        
        txtUsername.setForeground(COLOR_DEF);
        lblBadUsername.setVisible(false);
    }//GEN-LAST:event_txtUsernameFocusGained

    /**
     * Verificar Campo de Texto. Este método realiza la verificación de la validez 
     * del contenido del campo de texto mediante el método común "verificarTextField".
     * 
     * @see Formularios.frmRegister#verificarTextField(javax.swing.JTextField, javax.swing.JLabel, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
     * @param evt Evento de perdida del foco.
     */
    private void txtFullNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFullNameFocusLost
        String fullName = txtFullName.getText();
        verificarComponentes();
        
        verificarTextField(txtFullName,
                lblBadFullName, 
                fullName, 
                "Nombre y Apellido", 
                "^[a-zA-Z ]+$", 
                "El nombre o apellido contienen caracteres ilegales.");
    }//GEN-LAST:event_txtFullNameFocusLost

    /**
     * Preparación del Campo de Texto.
     * 
     * Es un método idéntico al utilizado con el Nombre de Usuario.
     * Es un método que prepara el campo de texto para el ingreso 
     * de contenido. Si el campo tiene el texto por defecto, este 
     * vacia el campo para el nuevo ingreso y establece el Foreground 
     * correspondiente.
     * 
     * @param evt Evento de obtención del foco.
     */
    private void txtFullNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFullNameFocusGained
        
        if (txtFullName.getText().equals("Ingrese un nombre y apellido")) {
            txtFullName.setText("");
        }
        
        txtFullName.setForeground(COLOR_DEF);
        lblBadFullName.setVisible(false);
    }//GEN-LAST:event_txtFullNameFocusGained

    private void cmbUserTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbUserTypeItemStateChanged
        verificarComponentes();
    }//GEN-LAST:event_cmbUserTypeItemStateChanged

    /**
     * Elemento Clickeado en la Tabla. Este método se activa cuando un 
     * elemento en la tabla es clickeado, es decir seleccionado. 
     * 
     * <p>
     * Obtiene los datos del usuario ubicado en el registro seleccionado, logrado
     * mediante su ID, que es Primary Key en la Base de Datos.</p>
     * 
     * <p>
     * Inserta los datos obtenidos de cada columna de la tabla en la BD, en su
     * campo correspondiente en el formulario. Y prepara las condiciones de cada 
     * campo; habilitando así además, los tres botones.</p>
     * 
     * @param evt Evento de click de en la tabla
     */
    private void jtUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtUsuarioMouseClicked
            
        if(!ConexionDB.verificarConexión(conexion)) {
            lblConexiónEstado.setText("Apagado");
            lblConexiónEstado.setForeground(COLOR_ERR);
            JOptionPane.showMessageDialog(rootPane, 
                    "Ocurrió un error en la conexión. Contacte a soporte.",
                    "Error.",
                    JOptionPane.ERROR_MESSAGE,
                    ICONO_ERROR);
            return;
        }
        
        if(evt.getButton() == 1) {
            int fila = jtUsuario.getSelectedRow();
            try {
                String consulta = "SELECT * FROM usuarios WHERE usuario_id=" +jtUsuario.getValueAt(fila, 0);

                Statement stm;
                stm = conexion.createStatement();
                ResultSet rs = stm.executeQuery(consulta);

                rs.next();

                char[] passDesencript = encriptar.ejecutarDesencript(rs.getString("usuario_pass"));

                txtFullName.setText(rs.getString("usuario_nom_ape"));
                txtUsername.setText(rs.getString("usuario_nom"));
                pwdPassword.setText(new String(passDesencript));
                cmbUserType.setSelectedItem(rs.getString("usuario_tipo"));

                Arrays.fill(passDesencript, '0');
                passDesencript = null;

                txtFullName.setForeground(Color.BLACK);
                txtUsername.setForeground(Color.BLACK);
                pwdPassword.setForeground(Color.BLACK);
                cmbUserType.setForeground(Color.BLACK);

                togglebtnShowPwd.setEnabled(true);
                lblDigitsPwd.setText(pwdPassword.getPassword().length + " caracteres");

                btnAgregar.setEnabled(true);
                btnEditar.setEnabled(true);
                btnEliminar.setEnabled(true);

                lblConexiónEstado.setText("Encendido");
                lblConexiónEstado.setForeground(new Color(0, 204, 204));

            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(rootPane,
                        "Hubo un error inesperado, intente de nuevo más tarde o contacte a soporte.\nCódigo de error: " + ex.getErrorCode(),
                        "Error",
                        JOptionPane.ERROR_MESSAGE,
                        ICONO_ERROR);
            }
        }
    }//GEN-LAST:event_jtUsuarioMouseClicked

    /**
     * Agregar un nuevo usuario. Este es el método encargado de subir usuarios 
     * a la Base de Datos. Obtiene los usuarios mediante un PreparedStatement, 
     * ya que se realizan consultas con parámetros.
     * 
     * <p>
     * En primera instancia, se verifica la conexión con la BD, si esta por alguna razón falló,
     * se le hace saber al usuario y se termina el método con "return" vacío.
     * </p>
     * 
     * <p>
     * Antes de realizar la consulta, se verifica si el usuario el nombre de 
     * usuario que se está intentando agregar ya existe en la Base de Datos, donde
     * la columna que guarda este dato debe ser ÚNICA (Parametro UNIQUE); por lo que
     * si se ingresara uno igual, obtendriamos una excepción SQL.
     * </p>
     * 
     * @see Formularios.frmRegister#esNombreUsuarioExistente()
     * @param evt Evento predeterminado de botón, refiere a la acción de click
     */
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        
        if(!ConexionDB.verificarConexión(conexion)) {
            lblConexiónEstado.setText("Apagado");
            lblConexiónEstado.setForeground(COLOR_ERR);
            JOptionPane.showMessageDialog(rootPane, 
                    "Ocurrió un error en la conexión. Contacte a soporte.",
                    "Error.",
                    JOptionPane.ERROR_MESSAGE,
                    ICONO_ERROR);
            return;
        }
        
        if(esNombreUsuarioExistente()) {
                JOptionPane.showMessageDialog(rootPane, 
                    "El nombre de usuario ingresado ya existe.\nIntente con uno diferente.", 
                    "Error: Usuario ya existente", 
                    JOptionPane.ERROR_MESSAGE, 
                    ICONO_ERROR);
                return;
        }
        
        try {
            PreparedStatement realizarConsulta;
            String consulta;
            String passEncript;
            
            consulta = "INSERT INTO usuarios (usuario_id, usuario_nom_ape, usuario_nom, usuario_pass, usuario_tipo) VALUES (NULL, ?, ?, ?, ?)";
            
            realizarConsulta = conexion.prepareStatement(consulta);

            passEncript = encriptar.ejecutarEncript(pwdPassword.getPassword());

            realizarConsulta.setString(1, txtFullName.getText());
            realizarConsulta.setString(2, txtUsername.getText());
            realizarConsulta.setString(3, passEncript);
            realizarConsulta.setString(4, (String) cmbUserType.getSelectedItem());

            int columnaInsertada = realizarConsulta.executeUpdate();

            if (columnaInsertada > 0) {
                JOptionPane.showMessageDialog(rootPane, 
                        "El usuario fue registrado con éxito.", 
                        "Registro de Usuario", 
                        JOptionPane.INFORMATION_MESSAGE, 
                        new ImageIcon(getClass().getResource("/Imagenes/iconSubida.png")));
                cargarUsuarios();
            }

            lblConexiónEstado.setText("Encendido");
            lblConexiónEstado.setForeground(new Color(0, 204, 204));

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, 
                    "Hubo un error inesperado, intente de nuevo más tarde o contacte a soporte.\nCódigo de error: " + ex.getErrorCode(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE, 
                    ICONO_ERROR);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    /**
     * Editar un usuario existente. Este método actualiza los datos del usuario 
     * seleccionado en la tabla por los ahora ingresados en los distintos campos 
     * del formulario. Se activa mediante el evento "JTUsuarios.mouseClicked".
     * 
     * <p>
     * En primera instancia, se verifica la conexión con la BD, si esta por alguna razón falló,
     * se le hace saber al usuario y se termina el método con "return" vacío.
     * </p>
     * 
     * <p>
     * Utiliza la sentencia SQL UPDATE para actualizar un registro ya existente. 
     * Haciendo uso de parámetros ("?"), se les ingresa los datos mediante el 
     * método ".setString". Para finalmente, ejecutar la consulta que actualice el
     * registrodel usuario con la misma ID en la tabla y en la Base de Datos. </p>
     * 
     * <p>
     * Posee verificación de nombre de usuario existente para evitar excepciones
     * SQL lanzadas por la repetición de datos establecidos como UNIQUE en la Base
     * de Datos.</p>
     * 
     * @param evt Evento predeterminado de botón, refiere a la acción de click
     */
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        
        if(!ConexionDB.verificarConexión(conexion)) {
            lblConexiónEstado.setText("Apagado");
            lblConexiónEstado.setForeground(COLOR_ERR);
            JOptionPane.showMessageDialog(rootPane, 
                    "Ocurrió un error en la conexión. Contacte a soporte.",
                    "Error.",
                    JOptionPane.ERROR_MESSAGE,
                    ICONO_ERROR);
            return;
        }
        
        if(esNombreUsuarioExistente()) {
                JOptionPane.showMessageDialog(rootPane, 
                    "El nombre de usuario ingresado ya existe.\nIntente con uno diferente.", 
                    "Error: Usuario ya existente", 
                    JOptionPane.ERROR_MESSAGE, 
                    ICONO_ERROR);
                return;
        }
        
        try {
            int opcion;
            int fila;
            String consulta;

            fila = jtUsuario.getSelectedRow();

            opcion = JOptionPane.showOptionDialog(null,
                    "¿Estás seguro de querer editar el usario " + jtUsuario.getValueAt(fila, 1) + "?",
                    "Modificación de Usuario",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    new ImageIcon(getClass().getResource("/Imagenes/iconActualizar.png")),
                    new Object[] {"Sí", "No"}, // Opciones personalizadas
                    "No"); 

            if (opcion == 0) {
                consulta = "UPDATE usuarios SET usuario_nom_ape = ?, usuario_nom = ?, usuario_pass = ?,usuario_tipo = ? WHERE usuario_id = " + jtUsuario.getValueAt(fila, 0);

                PreparedStatement realizarConsulta = conexion.prepareStatement(consulta);

                String passEncript = encriptar.ejecutarEncript(pwdPassword.getPassword());

                realizarConsulta.setString(1, txtFullName.getText());
                realizarConsulta.setString(2, txtUsername.getText());
                realizarConsulta.setString(3, passEncript);
                realizarConsulta.setString(4, (String) cmbUserType.getSelectedItem());

                int columnaInsertada = realizarConsulta.executeUpdate();

                if(columnaInsertada > 0) {
                    JOptionPane.showMessageDialog(rootPane, 
                        "Usuario actualizado con éxito", 
                        "Modificación de usuario", 
                        JOptionPane.INFORMATION_MESSAGE, 
                        new ImageIcon(getClass().getResource("/Imagenes/iconCorrecto.png")));
                }

                cargarUsuarios();
            }


        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, 
                    "Hubo un error inesperado, intente de nuevo más tarde o contacte a soporte.\nCódigo de error: " + ex.getErrorCode(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE, 
                    ICONO_ERROR);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    /**
     * Eliminar un usuario existente. Este método concreta la eliminación 
     * del usuario seleccionado en la tabla. Se activa mediante el evento 
     * "JTUsuarios.mouseClicked".
     * 
     * <p>
     * En primera instancia, se verifica la conexión con la BD, si esta por alguna razón falló,
     * se le hace saber al usuario y se termina el método con "return" vacío.
     * </p>
     * 
     * <p>
     * Utiliza una sentencia SQL DELETE, y elimina el usuario mediante
     * la ID de este, obteniendola de la tabla y añadiendola a la consulta.</p>
     * 
     * <p>
     * Se le pregunta al usuario si está seguro de su desición de eliminar
     * un registro para evitar borrados accidentales.</p>
     * 
     * @param evt Evento predeterminado de botón, refiere a la acción de click
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        
        if(!ConexionDB.verificarConexión(conexion)) {
            lblConexiónEstado.setText("Apagado");
            lblConexiónEstado.setForeground(COLOR_ERR);
            JOptionPane.showMessageDialog(rootPane, 
                    "Ocurrió un error en la conexión. Contacte a soporte.",
                    "Error.",
                    JOptionPane.ERROR_MESSAGE,
                    ICONO_ERROR);
            return;
        }
        
        try {
            int opcion;
            int fila;
            String consulta;
            
            fila = jtUsuario.getSelectedRow();
            
            ImageIcon icon = new ImageIcon(getClass().getResource("/Imagenes/iconBorrar.png"));

            // Mostrar el cuadro de diálogo
            opcion = JOptionPane.showOptionDialog(null,
                    "¿Estás seguro de querer eliminar al usario " + jtUsuario.getValueAt(fila, 1) + "?",
                    "Eliminación de Usuario",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    icon, // Ícono personalizado
                    new Object[] {"Sí", "No"}, //Opciones personalizadas 
                    "No"); 
            

            if (opcion == 0) {
                consulta = "DELETE FROM usuarios WHERE usuario_id = " + jtUsuario.getValueAt(fila, 0);
            
                PreparedStatement realizarConsulta = conexion.prepareStatement(consulta);
            
                realizarConsulta.executeUpdate();
            
                cargarUsuarios();
            }
 
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, 
                    "Hubo un error inesperado, intente de nuevo más tarde o contacte a soporte.\nCódigo de error: " + ex.getErrorCode(), 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE, 
                    ICONO_ERROR);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Cierre de conexión. Luego de cerrada la aplicación, se realiza el cierre
     * de la conexión con la base de datos para evitar brechas
     * de seguridad.
     * 
     * @param evt Evento de cerrado de la aplicación.
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        ConexionDB.closeConnection();
    }//GEN-LAST:event_formWindowClosed

    /**
     * Maneja el evento de escritura en el campo de texto de búsqueda. Este
     * método se activa cuando se escribe en el campo de texto "txtBuscar" y
     * filtra los registros de la tabla "jtUsuario" en función del texto ingresado.
     *
     * <p>
     * Cuando se libera una tecla en el campo de texto, se aplica un filtro a la
     * tabla utilizando un "TableRowSorter" que permite mostrar solo las filas
     * que coinciden con el texto ingresado, ignorando mayúsculas y
     * minúsculas.</p>
     *
     * <p>
     * El filtro se aplica a la segunda columna de la tabla (índice 1). Es decir, 
     * al Nombre y Apellido del usuario.</p>
     *
     * @param evt El evento de teclado que se genera al escribir          en el campo de texto.
     */
    @SuppressWarnings("unchecked")
    private void txtBuscarKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyTyped
        
        txtBuscar.addKeyListener(new KeyAdapter() {
        @Override
        @SuppressWarnings("unchecked")
        public void keyReleased(KeyEvent ke) {
            trs.setRowFilter(RowFilter.regexFilter("(?i)" + txtBuscar.getText(), 1));
        }
        });
        trs = new TableRowSorter(modeloTabla);
        jtUsuario.setRowSorter(trs);
    }//GEN-LAST:event_txtBuscarKeyTyped
    
    /**
     * Preparación del campo de texto. Es un método que prepara el campo de 
     * texto para el ingreso de contenido. Si el campo tiene el texto por 
     * defecto, este vacia el campo para el nuevo ingreso y establece el
     * Foreground correspondiente.
     * 
     * @param evt Evento de obtención de foco.
     */
    private void txtBuscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarFocusGained
        if(txtBuscar.getText().equals("Ingrese su búsqueda.")) {
            txtBuscar.setText("");
            txtBuscar.setForeground(COLOR_DEF);
        }
    }//GEN-LAST:event_txtBuscarFocusGained

    /**
     * Verificar campo de texto. Si el campo de texto está vacío, se 
     * restablece a sus valores predeterminados.
     * 
     * @param evt Evento de perdida de foco.
     */
    private void txtBuscarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBuscarFocusLost
        if(txtBuscar.getText().isBlank()) {
            txtBuscar.setText("Ingrese su búsqueda.");
            txtBuscar.setForeground(COLOR_INIT);
        }
    }//GEN-LAST:event_txtBuscarFocusLost

    /**
     * Boton de Mostrar/Ocultar Contraseña Presionado.
     * 
     * Si el botón de mostrar/ocultar se presiona, se cambia el estado 
     * de la variable focoPerdidoPorBoton a false; para que así, cuando 
     * se evalúe en el evento FocusLost de JPasswordField, no se establezca
     * el caracter predeterminado.
     * 
     * @param evt Evento de mouse presionado
     */
    private void togglebtnShowPwdMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_togglebtnShowPwdMousePressed
        focoPerdidoPorBoton = true;
    }//GEN-LAST:event_togglebtnShowPwdMousePressed

    
    /*
     *  MÉTODOS
     */
    
    /**
     * Verificación de existencia de nombre de usuario. Este método se encarga de 
     * verficar si un nombre de usuario ya existe en la base de datos. Se utiliza un 
     * "COUNT" para que sea más efectiva la consulta, que no devuelva los registros, 
     * sino el conteo de registros que coincidan.
     * 
     * @return true si existe el nombre de usuario, false si no existe.
     */
    private boolean esNombreUsuarioExistente() {
        try {
            String consulta = "SELECT COUNT(*) FROM usuarios WHERE usuario_nom = '" + txtUsername.getText() + "'";
            boolean existe = false;
            PreparedStatement pstm;
            ResultSet rs;
            
            pstm = conexion.prepareStatement(consulta);
            rs = pstm.executeQuery(consulta);
            
            if(rs.next()) {
                int contador = rs.getInt(1);
                if(contador > 0) {
                    existe = true;
                }
            }
            
            return existe;
        } catch (SQLException ex) {
            return true;
        }
    }
    
    /**
     * Verifica la validez de los componentes. Este método se encargar de verificar
     * si los diferentes componentes estnán vacíos o están en sus valores por defecto
     * (color inicial).
     * 
     * <p>
     * Esto con el objetivo de verificar si es apto para habilitar el botón de Agregar;
     * este método se llama cada vez que un componente pierde el foco o en el caso del
     * comboBox, que se cambie la selección.</p>
     */
    private void verificarComponentes() {
        
        String fullname = txtFullName.getText();
        String username = txtUsername.getText();
        char[] pass = pwdPassword.getPassword();
        
        boolean emptyFullName = fullname.isBlank() || txtFullName.getForeground().equals(COLOR_INIT);
        boolean emptyUsername = username.isBlank() || txtUsername.getForeground().equals(COLOR_INIT);
        boolean emptyPassword = pass.length == 0 || pwdPassword.getForeground().equals(COLOR_INIT);
        boolean emptyUserType = cmbUserType.getSelectedItem().equals("Seleccionar");
        
        Arrays.fill(pass, '\0');
        pass = null;
        
        boolean componentesVacios = emptyFullName && emptyUsername && emptyPassword && emptyUserType;
        boolean validez = lblBadFullName.isVisible() && lblBadUsername.isVisible() && lblBadPwd.isVisible();
        
        
        btnAgregar.setEnabled(!componentesVacios && !validez);
    }
    
    /**
     * Verificacion de los campos de texto. Este es un método que sintetiza un código
     * que utilizan los campos de texto disponibles en el formulario para la validación
     * del contenido ingresado. Se realizó de esta manera para evitar la clausula DRY
     * (Don't Repeat Yourself).
     * 
     * <p>
     * Maneja los errores y condiciones de los JTextField en un método común, recibiendo
     * de parámetros dichas condiciones para cada campo de texto.</p>
     * 
     * @param textField Elemento JTextField al que se aplica las condiciones.
     * @param lblBadtext Elemento JLabel donde se aplican los mensajes de error.
     * @param contenidoTextField Cadena de texto con el contenido actual del campo.
     * @param textoPredeterminado Cadena de texto predeterminada de cada campo.
     * @param expresionRegular Expresión regular que evalua la validez de los caracteres ingresados en el campo.
     * @param errorCaractIlegal Cadena de texto que indica que se ingresaron caracteres ilegales.
     */
    private void verificarTextField (JTextField textField, JLabel lblBadtext, String contenidoTextField, String textoPredeterminado, String expresionRegular, String errorCaractIlegal) {
        String mensajeError = null;
        boolean lblVisible = true;
        Color color = null;
        
        
        if (contenidoTextField.isBlank()) {
            color = COLOR_INIT;
            lblVisible = false;
            textField.setText("Ingrese un " + textoPredeterminado);
        } else if (contenidoTextField.equals("Ingrese un " + textoPredeterminado)) {
            color = COLOR_ERR;
            mensajeError = textoPredeterminado + "no valido, intente con uno diferente.";
        } else if (!contenidoTextField.matches(expresionRegular)){
            color = COLOR_ERR;
            mensajeError = errorCaractIlegal;
        } else if (contenidoTextField.length() > 40) {
            color = COLOR_ERR;
            mensajeError = "El" + textoPredeterminado + "no puede sobrepasar los 40 caracteres.";
        } else {
            color = COLOR_DEF;
            lblVisible = false;
        }
        
        textField.setForeground(color);
        lblBadtext.setText(mensajeError);
        lblBadtext.setVisible(lblVisible);
    }
    
    /**
     * Cargar usuarios en la tabla. Este método es el encargado de obtener los 
     * usuarios desde la Base de Datos e ingresarlos a la tabla. Por razones de
     * seguridad, la contraseña es una mera "simulación". Solamente se podrá ver
     * al darle click a un registro.
     */
    private void cargarUsuarios() {
        if(ConexionDB.verificarConexión(conexion)) {
            modeloTabla.setRowCount(0);
            jtUsuario.setAutoResizeMode(0);
            ResultSet resultado;
            Statement stm;

            try {
                conexion = ConexionDB.getConnection();
                String sql = "SELECT * FROM usuarios";
                stm = conexion.createStatement();
                resultado = stm.executeQuery(sql);

                String [] fila = new String [5];

                while(resultado.next()) {
                    fila[0] = resultado.getString("usuario_id");
                    fila[1] = resultado.getString("usuario_nom_ape");
                    fila[2] = resultado.getString("usuario_nom");
                    fila[3] = "●●●●●●●●●●●●";
                    fila[4] = resultado.getString("usuario_tipo");
                    modeloTabla.addRow(fila);
                }
                
                lblConexiónEstado.setText("Encendido");
                lblConexiónEstado.setForeground(new Color(0, 204, 204));
            } catch (SQLException | NullPointerException ex ) {
                JOptionPane.showMessageDialog(rootPane, 
                        "Hubo un error inesperado, intente de nuevo más tarde o contacte a soporte." , 
                        "Error", 
                        JOptionPane.ERROR_MESSAGE, 
                        ICONO_ERROR);
            }
        } else {
            lblConexiónEstado.setText("Apagado");
            lblConexiónEstado.setForeground(COLOR_ERR);
        }
    }
    
    /**
     * Configuración de la tabla. Este método se encarga de la configuración previa
     * de la tabla antes de ingresar los usuarios. Se configuran los encabezados con
     * sus respectivos tamaños pretederminados para una mejor estética en la GUI.
     */
    private void configTabla(){
        jtUsuario.setAutoResizeMode(0);
        
        String[] titulos = {"ID", "Nombre/Apellido", "Username", "Contraseña", "Tipo"};
        modeloTabla = new DefaultTableModel(null, titulos) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        jtUsuario.setModel(modeloTabla);
        
        
        TableColumnModel columnModel = jtUsuario.getColumnModel();
        DefaultTableCellRenderer centro = new DefaultTableCellRenderer();
        
        // Centra el texto del encabezado
        DefaultTableCellRenderer encabezado = (DefaultTableCellRenderer) jtUsuario.getTableHeader().getDefaultRenderer();
        encabezado.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Obtener ancho de la tabla
        int ancho = jtUsuario.getWidth();
        
        // Configurar tamaños predeterminados de las columnas
        columnModel.getColumn(0).setPreferredWidth((int) (ancho * 0.10));
        columnModel.getColumn(1).setPreferredWidth((int) (ancho * 0.35));
        columnModel.getColumn(2).setPreferredWidth((int) (ancho * 0.30));
        columnModel.getColumn(3).setPreferredWidth((int) (ancho * 0.30));
        columnModel.getColumn(4).setPreferredWidth((int) (ancho * 0.10));
        
        // Establece a la variable "centro" para centrado horizontal.
        centro.setHorizontalAlignment(SwingConstants.CENTER);
        
        // Aplica el renderizador a las columnas
        jtUsuario.getColumnModel().getColumn(0).setCellRenderer(centro);
        jtUsuario.getColumnModel().getColumn(1).setCellRenderer(centro);
        jtUsuario.getColumnModel().getColumn(2).setCellRenderer(centro);
        jtUsuario.getColumnModel().getColumn(3).setCellRenderer(centro);
        jtUsuario.getColumnModel().getColumn(4).setCellRenderer(centro); 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmRegister().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bgPanel;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cmbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtUsuario;
    private javax.swing.JLabel lblBadFullName;
    private javax.swing.JLabel lblBadPwd;
    private javax.swing.JLabel lblBadUsername;
    private javax.swing.JLabel lblConexión;
    private javax.swing.JLabel lblConexiónEstado;
    private javax.swing.JLabel lblDigitsPwd;
    private javax.swing.JLabel lblFullName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblUserType;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPasswordField pwdPassword;
    private javax.swing.JToggleButton togglebtnShowPwd;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
